Для того что бы разделить модели на множество файлов в Prisma 
1 - В генератор Client В файле Schema.prisma пишем previewFeatures = ["prismaSchemaFolder"]
2 - В папке prisma создаем папку schema 
3 - Переместить schema.prisma в папку schema 
4 - prisma format форматирует файлы под стиль призмы
5 - @relation создет связь
6 - В fields указываем в поле с которым связана текущая модель 
7 - include включает что то в поиск
8 - prisma generate генерирует клиента




1. Репозиторий - работает с бд и их ошибками.
2. И всё по новой
3. Призма добавляет возможность импортирования сгенерированых типов используя класс Prisma
Для получения типа для создания сущности модели используется НазваниеМоделиCreateInput

1. Для обработки призма ошибок используем блок try/catch
В catch обрабатываем класс ошибки используя instanceof и классы ошибки призмы
При обработке ошибок в запросе используется класс PrismaClientKnownRequestError
Для данного класса используя код ошибки можно определить в чем была совершена ошибка
Код ошибки начинается с буквы P и числа (от 1000 до 6000)

1. Чтобы предотвратить выполнение действия браузера по умолчанию для какого-либо события, необходимо воспользоваться методом preventDefault() объекта события (event). 
2. Для отправки POST запроса используем функцию fetch()
Первый аргумент fetch() - ссылка, по которой будет отправляться запрос
Второй аргумент fetch() - словарь с информацией про запрос
3. Метод cookie() у обьекта response позволяет добавить куки в браузер клиента
4. Чтобы получать данные из куки - используем обьект Request и его свойство cookies
5. Для express при работе с куки обязательно нужно использовать middleware, который позволит разобрать ваши куки
Для этого используем библиотеку cookie-parser
Если мы работаем в TypeScript обязательно скачиваем cookie-parser для TypeScript (npm i @types/cookie-parser)
6. Middleware можна напрямую указывать перед самим обработчиком запроса

JWT (Читается как Дзот) - JSON Web Token - json-объект который хранит данные зашифрованные в виде токена.
Этот токен создаётся на сервере шифруя какие-то данные
и подписывает их специальным секретным ключом. 
Для JWT обязательно иметь данные для шифровки (payload - данные)
Подпись\ключ (signature)
Пример токена: ddsaiofghdasiu1322ghbadfifgjblkcar312312gshuzfipjodjsrad543ishogljlz

npm i jsonwebtoken
npm i @types/jsonwebtoken

sign - функция принимает прееевый аргументом данные
вторьм аргументом принимает секретный ключ 
третим аргументом опционально доп. параметры создания токена
один из них expiresIn указывает на срок действия токена

verify - функция принимает первым аргументом токен
вторьм аргументом секретный ключ

в обьект ответа (response) можно записывать локальный данные кк которым можно получить доступ в последующих обработчиках
res.locals - обьект, после точки пишите название свойства ставите = и любые данные

